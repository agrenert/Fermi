#include "TCanvas.h"
#include "TH2.h"
#include "TMath.h"
#include "TROOT.h"
#include "TDirectory.h"
#include "TChain.h"
#include "TTree.h"

#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

void BranchReading()
{
  // I/O                                                                                 
  TString inputFileName = "www_amcatnlo_dilepfilter_1.root";
  TString outputFileName = "www_amcatnlo_signalfilter_1.root";
  TString treeName = "t_www"; // signal event tree                                       

  TFile* inputFile = new TFile(inputFileName,"r");
  TFile* outputFile = new TFile(outputFileName,"recreate");

  // checks if file opened correctly                                                     
  if (inputFileName == 0)
    {
      cout << "Fatal error: file '" << inputFileName << "' does not exist." << endl;
      return;
    }
  inputFile->cd();

  // Finds tree                                                                          
  TTree* tree;
  inputFile->GetObject(treeName,tree);
  if (tree == 0)
    {
      cout << "Error: TTree \"tree\" was not found." << endl;
      return;
    }
    
  else
    {
      // Output tree                                                                    
      TTree* out_tree = new TTree("Mu_el_pt_t_www","Output tree");

      // gets number of entries in tree                                                  
      Int_t numberOfEntries = tree->GetEntriesFast();

      // Defines the branches of the tree that we are interested in                      
      TBranch* el_pt_branch;
      TBranch* mu_pt_branch;

      // Variables that we will read from branched                                       
      Float_t el_pt;
      Float_t mu_pt;

      // connects the branches with the tree                                             
      tree->SetBranchAddress("el_pt" , &el_pt , &el_pt_branch );
      tree->SetBranchAddress("mu_pt" , &mu_pt , &mu_pt_branch );

      out_tree->Branch("el_pt", &el_pt);
      out_tree->Branch("mu_pt", &mu_pt);

      // creates histograms to fill                                                      
      TH1D* el_hist  = new TH1D("el_hist" ,"el_hist" , 100, 0, 400);
      TH1D* mu_hist  = new TH1D("mu_hist" ,"mu_hist" , 100, 0, 400);
      TH1D* result_hist = new TH1D("el_mu_90","el_mu_90", 100, 80, 90);

      // Loop to fill histogram(s)                                                       
      for (Int_t i = 0; i < numberOfEntries; i++)
       {
          // gets current loop entry                                                     
          tree->GetEntry(i);

          // applies cuts                                                                
          if (el_pt > 0 && mu_pt > 0)
            {
              el_hist->Fill (el_pt );
              mu_hist->Fill (mu_pt );
            }
          if ((el_pt + mu_pt) >= 80 && (el_pt + mu_pt <= 90))
            {
              result_hist->Fill(el_pt + mu_pt);
            }

        }

      // Sets up canvas and graphs                                                       
      Double_t w = 1350;
      Double_t h = 450;
      TCanvas* canvas = NULL;
      canvas = new TCanvas("canvas", "electron and muon transverse momentum", w, h);
      canvas->SetWindowSize(w + (w - canvas->GetWw()), h + (h - canvas->GetWh()));
      canvas->Divide(3,1);

      canvas->SetBorderSize(2);
      canvas->SetLeftMargin(0.119326);
      canvas->cd(1);

      el_hist->Draw();
      el_hist->SetName("el_pt plot");
      el_hist->SetTitle("Plot of Electron Momentum");
      el_hist->SetFillColor(46);
      el_hist->SetLineColor(2);
      el_hist->SetLineWidth(2);
      el_hist->GetXaxis()->SetTitle("el_pt [GeV]");
      el_hist->GetYaxis()->SetTitle("number of entries");
      el_hist->GetXaxis()->CenterTitle(kTRUE);
      el_hist->GetYaxis()->CenterTitle(kTRUE);
      el_hist->GetXaxis()->SetTitleOffset(1.2);
      el_hist->GetYaxis()->SetTitleOffset(1.8);

      canvas->cd(2);

      mu_hist->Draw();
      mu_hist->SetName("mu_pt plot");
      mu_hist->SetTitle("Plot of Muon Momentum");
      mu_hist->SetFillColor(38);
      mu_hist->SetLineColor(9);
      mu_hist->SetLineWidth(2);
      mu_hist->GetXaxis()->SetTitle("mu_pt [GeV]");
      mu_hist->GetYaxis()->SetTitle("number of entries");
      mu_hist->GetXaxis()->CenterTitle(kTRUE);
      mu_hist->GetYaxis()->CenterTitle(kTRUE);
      mu_hist->GetXaxis()->SetTitleOffset(1.2);
      mu_hist->GetYaxis()->SetTitleOffset(1.8);

      canvas->cd(3);

      result_hist->Draw();
      result_hist->SetName("el and mu pt plot");
      result_hist->SetTitle("Muon + Electron Momentum (80-90)");
      result_hist->SetFillColor(41);
      result_hist->SetLineColor(5);
      result_hist->SetLineWidth(2);
      result_hist->GetXaxis()->SetTitle("el_pt + mu_pt [GeV]");
      result_hist->GetYaxis()->SetTitle("number of entries");
      result_hist->GetXaxis()->CenterTitle(kTRUE);
      result_hist->GetYaxis()->CenterTitle(kTRUE);
      result_hist->GetXaxis()->SetTitleOffset(1.2);
      result_hist->GetYaxis()->SetTitleOffset(1.6);

      outputFile->cd();
      out_tree->Write();
      el_hist->Write();
      mu_hist->Write();
      result_hist->Write();
    }
}
